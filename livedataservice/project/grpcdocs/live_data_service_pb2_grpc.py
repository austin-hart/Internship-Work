# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import live_data_service_pb2 as live__data__service__pb2


class LiveDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterOddsApiFeed = channel.unary_unary(
                '/LiveDataService/RegisterOddsApiFeed',
                request_serializer=live__data__service__pb2.OddsApiInfo.SerializeToString,
                response_deserializer=live__data__service__pb2.FeedIDReturn.FromString,
                )
        self.GetValueOfFeed = channel.unary_unary(
                '/LiveDataService/GetValueOfFeed',
                request_serializer=live__data__service__pb2.FeedIDRequest.SerializeToString,
                response_deserializer=live__data__service__pb2.Value.FromString,
                )
        self.GetSupportedFeeds = channel.unary_unary(
                '/LiveDataService/GetSupportedFeeds',
                request_serializer=live__data__service__pb2.Empty.SerializeToString,
                response_deserializer=live__data__service__pb2.Context.FromString,
                )
        self.DeleteFeed = channel.unary_unary(
                '/LiveDataService/DeleteFeed',
                request_serializer=live__data__service__pb2.DeleteFeedID.SerializeToString,
                response_deserializer=live__data__service__pb2.Empty.FromString,
                )


class LiveDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterOddsApiFeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetValueOfFeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSupportedFeeds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LiveDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterOddsApiFeed': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterOddsApiFeed,
                    request_deserializer=live__data__service__pb2.OddsApiInfo.FromString,
                    response_serializer=live__data__service__pb2.FeedIDReturn.SerializeToString,
            ),
            'GetValueOfFeed': grpc.unary_unary_rpc_method_handler(
                    servicer.GetValueOfFeed,
                    request_deserializer=live__data__service__pb2.FeedIDRequest.FromString,
                    response_serializer=live__data__service__pb2.Value.SerializeToString,
            ),
            'GetSupportedFeeds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupportedFeeds,
                    request_deserializer=live__data__service__pb2.Empty.FromString,
                    response_serializer=live__data__service__pb2.Context.SerializeToString,
            ),
            'DeleteFeed': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFeed,
                    request_deserializer=live__data__service__pb2.DeleteFeedID.FromString,
                    response_serializer=live__data__service__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LiveDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LiveDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterOddsApiFeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LiveDataService/RegisterOddsApiFeed',
            live__data__service__pb2.OddsApiInfo.SerializeToString,
            live__data__service__pb2.FeedIDReturn.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetValueOfFeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LiveDataService/GetValueOfFeed',
            live__data__service__pb2.FeedIDRequest.SerializeToString,
            live__data__service__pb2.Value.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSupportedFeeds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LiveDataService/GetSupportedFeeds',
            live__data__service__pb2.Empty.SerializeToString,
            live__data__service__pb2.Context.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LiveDataService/DeleteFeed',
            live__data__service__pb2.DeleteFeedID.SerializeToString,
            live__data__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
